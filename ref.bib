@misc{IntelOptGuide,
  title = {Intel {O}ptimization {G}uide},
  author = {Intel},
  note = {Available at: https://www.intel.com/content/dam/doc/manual/64-ia-32-architectures-optimization-manual.pdf}
} 

@misc{memsql,
  title = {Mem{SQL}, the no-limits database},
  author = {Mem{SQL}},
  note = {https://www.memsql.com}
} 

@misc{memsqladamblog,
  title = {Mem{SQL} {B}log: {T}he {S}tory {B}ehind {M}em{SQL}’s {S}kiplist {I}ndexes},
  author = {{A}dam {P}rout},
  note = {Available at: https://www.memsql.com/blog/what-is-skiplist-why-skiplist-index-for-memsql}
} 

@misc{xfast,
  title = {Log-logarithmic worst-case range queries are possible in space $\Theta(N)$},
  author = {Dan E.Willard},
  note = {https://doi.org/10.1016/0020-0190(83)90075-3}
} 

@article{hashjoin_icde04,
 author = {Chen, Shimin and Ailamaki, Anastassia and Gibbons, Phillip B. and Mowry, Todd C.},
 title = {Improving Hash Join Performance Through Prefetching},
 journal = {ACM Trans. Database Syst.},
 issue_date = {August 2007},
 volume = {32},
 number = {3},
 month = aug,
 year = {2007},
 issn = {0362-5915},
 articleno = {17},
 url = {http://doi.acm.org/10.1145/1272743.1272747},
 doi = {10.1145/1272743.1272747},
 acmid = {1272747},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {CPU cache performance, CPU cache prefetching, Hash join, group prefetching, software-pipelined prefetching},
} 

@article{operatorfusion_vldb17,
 author = {Menon, Prashanth and Mowry, Todd C. and Pavlo, Andrew},
 title = {Relaxed Operator Fusion for In-memory Databases: Making Compilation, Vectorization, and Prefetching Work Together at Last},
 journal = {Proc. VLDB Endow.},
 issue_date = {September 2017},
 volume = {11},
 number = {1},
 month = sep,
 year = {2017},
 issn = {2150-8097},
 pages = {1--13},
 numpages = {13},
 url = {https://doi.org/10.14778/3151113.3151114},
 doi = {10.14778/3151113.3151114},
 acmid = {3151114},
 publisher = {VLDB Endowment},
} 

@article{amac_vldb15,
 author = {Kocberber, Onur and Falsafi, Babak and Grot, Boris},
 title = {Asynchronous Memory Access Chaining},
 journal = {Proc. VLDB Endow.},
 issue_date = {December 2015},
 volume = {9},
 number = {4},
 month = dec,
 year = {2015},
 issn = {2150-8097},
 pages = {252--263},
 numpages = {12},
 url = {http://dx.doi.org/10.14778/2856318.2856321},
 doi = {10.14778/2856318.2856321},
 acmid = {2856321},
 publisher = {VLDB Endowment},
}

@inproceedings{cimple_pact18,
 author = {Kiriansky, Vladimir and Xu, Haoran and Rinard, Martin and Amarasinghe, Saman},
 title = {Cimple: {I}nstruction and {M}emory {L}evel {P}arallelism: {A} {DSL} for {U}ncovering {ILP} and {MLP}},
 booktitle = {Proceedings of the 27th International Conference on Parallel Architectures and Compilation Techniques},
 series = {PACT '18},
 year = {2018},
 isbn = {978-1-4503-5986-3},
 location = {Limassol, Cyprus},
 pages = {30:1--30:16},
 articleno = {30},
 numpages = {16},
 url = {http://doi.acm.org/10.1145/3243176.3243185},
 doi = {10.1145/3243176.3243185},
 acmid = {3243185},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@inproceedings{hot_sigmod18,
 author = {Binna, Robert and Zangerle, Eva and Pichl, Martin and Specht, G\"{u}nther and Leis, Viktor},
 title = {HOT: A Height Optimized Trie Index for Main-Memory Database Systems},
 booktitle = {Proceedings of the 2018 International Conference on Management of Data},
 series = {SIGMOD '18},
 year = {2018},
 isbn = {978-1-4503-4703-7},
 location = {Houston, TX, USA},
 pages = {521--534},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/3183713.3196896},
 doi = {10.1145/3183713.3196896},
 acmid = {3196896},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {height optimized trie, index, main memory, simd},
} 

@inproceedings{fast_sigmod10,
 author = {Kim, Changkyu and Chhugani, Jatin and Satish, Nadathur and Sedlar, Eric and Nguyen, Anthony D. and Kaldewey, Tim and Lee, Victor W. and Brandt, Scott A. and Dubey, Pradeep},
 title = {FAST: Fast Architecture Sensitive Tree Search on Modern CPUs and GPUs},
 booktitle = {Proceedings of the 2010 ACM SIGMOD International Conference on Management of Data},
 series = {SIGMOD '10},
 year = {2010},
 isbn = {978-1-4503-0032-2},
 location = {Indianapolis, Indiana, USA},
 pages = {339--350},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1807167.1807206},
 doi = {10.1145/1807167.1807206},
 acmid = {1807206},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {compression, cpu, data-level parallelism, gpu, thread-level parallelism, tree search},
} 

@inproceedings{arttrie_icde13,
 author = {Leis, Viktor and Kemper, Alfons and Neumann, Thomas},
 title = {The Adaptive Radix Tree: ARTful Indexing for Main-memory Databases},
 booktitle = {Proceedings of the 2013 IEEE International Conference on Data Engineering (ICDE 2013)},
 series = {ICDE '13},
 year = {2013},
 isbn = {978-1-4673-4909-3},
 pages = {38--49},
 numpages = {12},
 url = {http://dx.doi.org/10.1109/ICDE.2013.6544812},
 doi = {10.1109/ICDE.2013.6544812},
 acmid = {2511193},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
} 

@article{masstree,
author = {Mao, Yandong and Kohler, Eddie and Tappan Morris, Robert},
year = {2012},
month = {09},
pages = {},
title = {Cache craftiness for fast multicore key-value storage},
journal = {EuroSys'12 - Proceedings of the EuroSys 2012 Conference},
doi = {10.1145/2168836.2168855}
}

@Article{ajtai88comb-lowerbound,
author="Ajtai, M.",
title="A lower bound for finding predecessors in {Yao}'s cell probe model",
journal="Combinatorica",
year="1988",
month="Sep",
day="01",
volume="8",
number="3",
pages="235--247",
abstract="LetL be the set consisting of the firstq positive integers. We prove in this paper that there does not exist a data structure for representing an arbitrary subsetA ofL which uses poly ({\textbrokenbar}A{\textbrokenbar}) cells of memory (where each cell holdsc logq bits of information) and which the predecessor inA of an arbitraryx≦q can be determined by probing only a constant (independent ofq) number of cells. Actually our proof gives more: the theorem remains valid if this number is less than$\epsilon$ log logq, that is D. E. Willard's algorithm [2] for finding the predecessor inO(log logq) time is optimal up to a constant factor.",
issn="1439-6912",
doi="10.1007/BF02126797",
url="https://doi.org/10.1007/BF02126797"
}

@article{vebtree,
  title={Preserving Order in a Forest in Less Than Logarithmic Time and Linear Space},
  author={Peter van Emde Boas},
  journal={Inf. Process. Lett.},
  year={1977},
  volume={6},
  pages={80-82}
}

@InProceedings{cuckoohash,
author="Pagh, Rasmus
and Rodler, Flemming Friche",
editor="auf der Heide, Friedhelm Meyer",
title="Cuckoo Hashing",
booktitle="Algorithms --- ESA 2001",
year="2001",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="121--133",
abstract="We present a simple and efficient dictionary with worst case constant lookup time, equaling the theoretical performance of the classic dynamic perfect hashing scheme of Dietzfelbinger et al. The space usage is similar to that of binary search trees, i.e., three words per key on average. The practicality of the scheme is backed by extensive experiments and comparisons with known methods, showing it to be quite competitive also in the average case.",
isbn="978-3-540-44676-7"
}

@INPROCEEDINGS{bucketcuckoo, 
author={Kenneth A. Ross}, 
booktitle={2007 IEEE 23rd International Conference on Data Engineering}, 
title={Efficient Hash Probes on Modern Processors}, 
year={2007}, 
volume={}, 
number={}, 
pages={1297-1301}, 
abstract={Bucketized versions of Cuckoo hashing can achieve 95-99% occupancy, without any space overhead for pointers or other structures. However, such methods typically need to consult multiple hash buckets per probe, and have therefore been seen as having worse probe performance than conventional techniques for large tables. We consider workloads typical of database and stream processing, in which keys and payloads are small, and in which a large number of probes are processed in bulk. We show how to improve probe performance by (a) eliminating branch instructions from the probe code, enabling better scheduling and latency-hiding by modern processors, and (b) using SIMD instructions to process multiple keys/payloads in parallel. We show that on modern architectures, probes to a bucketized Cuckoo hash table can be processed much faster than conventional hash table probes, for both small and large memory-resident tables. On a Pentium 4, a probe is two to four times faster, while on the Cell SPE processor a probe is ten times faster.}, 
keywords={file organisation;parallel processing;processor scheduling;database;stream processing;branch instructions;modern processor scheduling;latency-hiding;SIMD instructions;bucketized Cuckoo hash table;Pentium 4;Cell SPE processor;Probes;Payloads;Bandwidth;Processor scheduling;Database systems;Indexing;Aggregates;Data structures;Delay;Out of order}, 
doi={10.1109/ICDE.2007.368997}, 
ISSN={1063-6382}, 
month={April},}

@misc{xxhash,
  title = {xxHash},
  author = {Yann Collet},
  note = {Available at: https://github.com/Cyan4973/xxHash}
} 

@article{patricia,
 author = {Morrison, Donald R.},
 title = {PATRICIA\&Mdash;Practical Algorithm To Retrieve Information Coded in Alphanumeric},
 journal = {J. ACM},
 issue_date = {Oct. 1968},
 volume = {15},
 number = {4},
 month = oct,
 year = {1968},
 issn = {0004-5411},
 pages = {514--534},
 numpages = {21},
 url = {http://doi.acm.org/10.1145/321479.321481},
 doi = {10.1145/321479.321481},
 acmid = {321481},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@misc{redis,
  title = {Redis},
  author = {Redis},
  note = {Available at: https://redis.io/}
} 

@misc{densehashset,
  title = {dense\_hash\_set Library},
  author = {Google},
  note = {Available at: https://github.com/sparsehash/sparsehash}
} 

@misc{stx_btree,
  title = {STX B-tree},
  author = {Timo Bingmann},
  note = {Available at: https://github.com/bingmann/stx-btree}
} 

@misc{mlpds_repo,
  title = {Implementation for {M}lp{I}ndex},
  author = {Haoran Xu},
  note = {https://github.com/sillycross/mlpds}
} 

@inproceedings{art_sync,
 author = {Leis, Viktor and Scheibner, Florian and Kemper, Alfons and Neumann, Thomas},
 title = {The ART of Practical Synchronization},
 booktitle = {Proceedings of the 12th International Workshop on Data Management on New Hardware},
 series = {DaMoN '16},
 year = {2016},
 isbn = {978-1-4503-4319-0},
 location = {San Francisco, California},
 pages = {3:1--3:8},
 articleno = {3},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/2933349.2933352},
 doi = {10.1145/2933349.2933352},
 acmid = {2933352},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@Inproceedings {bwtree,
author = {Levandoski, Justin and Lomet, David and Sengupta, Sudipta},
title = {The Bw-Tree: A B-tree for New Hardware Platforms},
year = {2013},
month = {April},
publisher = {IEEE},
url = {https://www.microsoft.com/en-us/research/publication/the-bw-tree-a-b-tree-for-new-hardware/},
edition = {2013 IEEE 29th International Conference on Data Engineering (ICDE)},
}

@inproceedings{lockfree_skiplist,
author = {Fomitchev, Mikhail and Ruppert, Eric},
year = {2004},
month = {01},
pages = {50-59},
title = {Lock-free linked lists and skip lists},
doi = {10.1145/1011767.1011776}
}

@article{binary_search_layout,
 author = {Khuong, Paul-Virak and Morin, Pat},
 title = {Array Layouts for Comparison-Based Searching},
 journal = {J. Exp. Algorithmics},
 issue_date = {2017},
 volume = {22},
 month = may,
 year = {2017},
 issn = {1084-6654},
 pages = {1.3:1--1.3:39},
 articleno = {1.3},
 numpages = {39},
 url = {http://doi.acm.org/10.1145/3053370},
 doi = {10.1145/3053370},
 acmid = {3053370},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Binary search, caching, data layouts, microprocessor architecture, pipelining},
} 
